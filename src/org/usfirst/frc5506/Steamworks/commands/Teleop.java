// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.Steamworks.commands;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5506.Steamworks.Robot;

/**
 *
 */
public class Teleop extends Command {
	// kill switch control
	public boolean enabled = true;
	
	// "true" removes tank drive functionality, and switches to arcade drive via j1
	public boolean j1arcade = false;
	
	public boolean conveyorPos = false;
	
	// was "a" pressed in the previous tick?
	public boolean aWasPressed = false;
	
	public boolean fullPower = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
public Teleop() {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// MUST BE FIRST STATEMENT
    	if (!enabled && !Robot.oi.getDriverJoystick().getRawButton(7)) return;
    	
    	if (Robot.oi.getDriverJoystick().getRawButton(8) || // start
        		Robot.oi.getDriverJoystick().getRawButton(9) || // L stick
        		Robot.oi.getDriverJoystick().getRawButton(10)) // R stick
    		enabled = false;
    	else if (Robot.oi.getDriverJoystick().getRawButton(7)) // back
			enabled = true;
    	
		if (Robot.oi.getDriverJoystick().getRawButton(1)) { // A
			if (!aWasPressed) {
				aWasPressed = true;
				fullPower = !fullPower;
			}
		} else
			aWasPressed = false;
    	if (j1arcade) {
    		// why do I have to invert these? idk.
    		double x = Robot.oi.getFunctionJoystick().getX() / (fullPower ? 1 : 2);
    		double y = Robot.oi.getFunctionJoystick().getY() / (fullPower ? 1 : 2);
    		
    		Robot.driveTrain.driveRight(y + x);
    		Robot.driveTrain.driveLeft(y - x);

			if (Robot.conveyor.getSwitch())
				conveyorPos = false;
    		if (Robot.oi.getFunctionJoystick().getRawButton(11)) {
    			if (Robot.conveyor.getSwitch())
    				conveyorPos = true;
    			Robot.conveyor.set(conveyorPos ? -0.5 : -1);
    		} else if (Robot.oi.getFunctionJoystick().getRawButton(12))
    			Robot.conveyor.set(1);
    		else
    			Robot.conveyor.set(0);
    	} else {
	    	//left axis = 1, right axis = 5
	    	double leftSpeed = Robot.oi.getDriverJoystick().getRawAxis(1);
	    	double rightSpeed = Robot.oi.getDriverJoystick().getRawAxis(5);

	    	Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, Math.abs(leftSpeed));
	    	Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, Math.abs(rightSpeed));
	    	
	        //z axis
	    	double conveyorSpeed = Robot.oi.getDriverJoystick().getRawAxis(2)
	    			- Robot.oi.getDriverJoystick().getRawAxis(3); //HEYYYYY KIIIOOOONN
	
	    	Robot.driveTrain.driveLeft(Math.abs(leftSpeed) > 0.15 ? leftSpeed / (fullPower ? 1 : 2) : 0);
	        Robot.driveTrain.driveRight(Math.abs(rightSpeed) > 0.15 ? rightSpeed / (fullPower ? 1 : 2) : 0);
	        if (conveyorSpeed < 0 && Robot.conveyor.getSwitch())
	        	conveyorPos = true;
	        else if (Robot.conveyor.getSwitch())
	        	conveyorPos = false;
	        if (conveyorSpeed < 0 && conveyorPos)
	        	conveyorSpeed /= 2;
	        Robot.conveyor.set(conveyorSpeed);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        		return Robot.oi.getDriverJoystick().getRawButton(8) ||
        		Robot.oi.getDriverJoystick().getRawButton(9) ||
        		Robot.oi.getDriverJoystick().getRawButton(10);
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.driveLeft(0);
    	Robot.driveTrain.driveRight(0);
    	Robot.conveyor.set(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	
    }
}
