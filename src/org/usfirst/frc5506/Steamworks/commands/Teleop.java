// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.Steamworks.commands;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5506.Steamworks.Robot;

/**
 *
 */
public class Teleop extends Command {
	// kill switch control
	public boolean enabled = true;
	
	// "true" removes tank drive functionality, and switches to arcade drive via j1
	public boolean j1arcade = false;
	
	
	// was "a" pressed in the previous tick?
	public boolean aWasPressed = false;
	
	public boolean fullPower = true;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
public Teleop() {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// MUST BE FIRST STATEMENT
    	//if (!enabled && !Robot.oi.getDriverJoystick().getRawButton(7)) return;
    	
    	/*if (Robot.oi.getDriverJoystick().getRawButton(8) || // start
        		Robot.oi.getDriverJoystick().getRawButton(9) || // L stick
        		Robot.oi.getDriverJoystick().getRawButton(10)) // R stick
    		enabled = false;
    	else if (Robot.oi.getDriverJoystick().getRawButton(7)) // back
			enabled = true;*/
    	
		//if (Robot.oi.getDriverJoystick().getRawButton(4)) { // Y
		//	if (!aWasPressed) {
		//		aWasPressed = true;
		//		fullPower = !fullPower;
		//	}
		//} else
		//	aWasPressed = false;
    	if (Robot.oi.getDriverJoystick().getRawButton(1)) {
    		Robot.driveTrain.driveLeftCurved(1);
    		Robot.driveTrain.driveRightCurved(1);
    		return;
    	}
    	if (Robot.oi.getDriverJoystick().getRawButton(4)) {
    		Robot.driveTrain.driveLeftCurved(-1);
    		Robot.driveTrain.driveRightCurved(-1);
    		return;
    	}
    	if (j1arcade) {
    		double x = Robot.oi.getFunctionJoystick().getX() / (fullPower ? 1 : 2);
    		double y = -Robot.oi.getFunctionJoystick().getY() / (fullPower ? 1 : 2);
    		
    		Robot.driveTrain.driveArcade(y, x);

	        if (Robot.conveyer.teleop) {
	    		if (Robot.oi.getFunctionJoystick().getRawButton(11))
	    			Robot.conveyer.set(-1);
	    		else if (Robot.oi.getFunctionJoystick().getRawButton(12))
	    			Robot.conveyer.set(1);
	    		else
	    			Robot.conveyer.set(0);
	        }
    	} else {
	    	//left axis = 1, right axis = 5
	    	double leftSpeed = -Robot.oi.getDriverJoystick().getRawAxis(1);
	    	double rightSpeed = -Robot.oi.getDriverJoystick().getRawAxis(5);
	    	if (Math.abs(leftSpeed) >= 0.15)
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, Math.abs(leftSpeed));
	    	else
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, 0);
	    	if (Math.abs(rightSpeed) >= 0.15)
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, Math.abs(rightSpeed));
	    	else
	    		Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, 0);
	    	
	        //z axis
	    	double conveyorSpeed = Robot.oi.getDriverJoystick().getRawAxis(2)
	    			- Robot.oi.getDriverJoystick().getRawAxis(3)
	    			+ Robot.oi.getFunctionJoystick().getZ();
	
	    	if (Robot.driveTrain.teleop) {
		    	Robot.driveTrain.driveLeftCurved(Math.abs(leftSpeed) > 0.15 ? leftSpeed * (fullPower ? 1 : 0.75) : 0);
		        Robot.driveTrain.driveRightCurved(Math.abs(rightSpeed) > 0.15 ? rightSpeed * (fullPower ? 1 : 0.75) : 0);
	    	}
	        //Robot.driveTrain.driveLeft(leftSpeed / (fullPower ? 1 : 2));
	        //Robot.driveTrain.driveRight(rightSpeed / (fullPower ? 1 : 2));
	        if (Robot.conveyer.teleop)
	        	Robot.conveyer.set(conveyorSpeed);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        		return Robot.oi.getDriverJoystick().getRawButton(8) ||
        		Robot.oi.getDriverJoystick().getRawButton(9) ||
        		Robot.oi.getDriverJoystick().getRawButton(10);
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.driveLeft(0);
    	Robot.driveTrain.driveRight(0);
    	Robot.conveyer.set(0);
    	Robot.oi.getDriverJoystick().setRumble(RumbleType.kLeftRumble, 0);
    	Robot.oi.getDriverJoystick().setRumble(RumbleType.kRightRumble, 0);
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	
    }
}
