// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.Steamworks.subsystems;

import org.usfirst.frc5506.Steamworks.Robot;
import org.usfirst.frc5506.Steamworks.RobotMap;
import org.usfirst.frc5506.Steamworks.commands.*;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController driveLeft = RobotMap.driveTrainDriveLeft;
    private final SpeedController driveRight = RobotMap.driveTrainDriveRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double lastLeftSpeed = 0d;
    private double lastRightSpeed = 0d;
    public boolean teleop = false;
    public final boolean accelCurve = true;
    

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void driveLeft(double speed) {
    	lastLeftSpeed = speed;
    	driveLeft.set(speed);
    }
    
    public void driveRight(double speed) {
    	lastRightSpeed = speed;
    	driveRight.set(speed);
    }
    
    public void driveLeftCurved(double speed) {
    	if (!accelCurve) {
    		driveLeft(speed);
    		return;
    	}
    	if (speed > 0) {
    		if (speed > lastLeftSpeed + 0.04)
    			driveLeft(lastLeftSpeed + 0.04);
    		else
    			driveLeft(speed);
    	} else {
    		if (speed < lastLeftSpeed - 0.04)
    			driveLeft(lastLeftSpeed - 0.04);
    		else
    			driveLeft(speed);
    	}
    }
    
    public void driveRightCurved(double speed) {
    	if (!accelCurve) {
    		driveRight(speed);
    		return;
    	}
    	if (speed > 0) {
    		if (speed > lastRightSpeed + 0.04)
    			driveRight(lastRightSpeed + 0.04);
    		else
    			driveRight(speed);
    	} else {
    		if (speed < lastRightSpeed - 0.04)
    			driveRight(lastRightSpeed - 0.04);
    		else
    			driveRight(speed);
    	}
    }
    
    public void driveArcade(double forward, double turn) {
    	Robot.driveTrain.driveRight(forward + turn);
    	Robot.driveTrain.driveLeft(forward - turn);
    }
}

